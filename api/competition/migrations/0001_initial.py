# Generated by Django 4.1.7 on 2023-03-06 21:30

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brolympics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('year', models.DateField(default=django.utils.timezone.now)),
                ('completed', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('name', models.CharField(default='non', max_length=32)),
                ('type', models.CharField(choices=[('H', 'h2h'), ('S', 'score')], default='H', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('name', models.CharField(max_length=60)),
                ('player_1_first_name', models.CharField(max_length=30)),
                ('player_1_last_name', models.CharField(max_length=30)),
                ('player_2_first_name', models.CharField(max_length=30)),
                ('player_2_last_name', models.CharField(max_length=30)),
                ('score', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('ties', models.PositiveIntegerField(default=0)),
                ('win_percentage', models.FloatField(default=None, null=True)),
                ('ranking', models.PositiveIntegerField()),
                ('brolympic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.brolympics', verbose_name='brolympic')),
            ],
        ),
        migrations.CreateModel(
            name='EventTeamRanking_Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_score', models.FloatField()),
                ('rank', models.PositiveIntegerField()),
                ('points', models.PositiveIntegerField()),
                ('final', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_ranking_score', to='competition.event')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_event_ranking_score', to='competition.team')),
            ],
        ),
        migrations.CreateModel(
            name='EventTeamRanking_H2H',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.PositiveIntegerField()),
                ('losses', models.PositiveIntegerField()),
                ('ties', models.PositiveIntegerField()),
                ('win_percentage', models.FloatField()),
                ('rank', models.PositiveIntegerField()),
                ('points', models.PositiveIntegerField()),
                ('final', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_ranking_h2h', to='competition.event')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_event_ranking_h2h', to='competition.team')),
            ],
        ),
        migrations.CreateModel(
            name='Competitions_Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField()),
                ('player_1_score', models.FloatField()),
                ('player_2_score', models.FloatField()),
                ('team_score', models.FloatField()),
                ('low_score_wins', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=False)),
                ('completed', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitions_score', to='competition.event')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitions_team', to='competition.event')),
            ],
        ),
        migrations.CreateModel(
            name='Competitions_H2H',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField()),
                ('team_1_score', models.FloatField()),
                ('team_2_score', models.FloatField()),
                ('low_score_wins', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=False)),
                ('completed', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitions_h2h', to='competition.event')),
                ('team_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_1', to='competition.team')),
                ('team_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_2', to='competition.team')),
                ('winner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winner', to='competition.team')),
            ],
        ),
    ]
